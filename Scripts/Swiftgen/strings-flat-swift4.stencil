// swiftlint:disable superfluous_disable_command
// swiftlint:disable trailing_newline

{% if tables.count > 0 %}
{% set accessModifier %}{% if param.publicAccess %}public{% else %}internal{% endif %}{% endset %}
import Foundation

// swiftlint:disable superfluous_disable_command
// swiftlint:disable file_length
{% macro parametersBlock types %}{% filter removeNewlines:"leading" %}
{% for type in types %}
_ p{{forloop.counter}}: {{type}}{% if not forloop.last %}, {% endif %}
{% endfor %}
{% endfilter %}{% endmacro %}
{% macro argumentsBlock types %}{% filter removeNewlines:"leading" %}
{% for type in types %}
p{{forloop.counter}}{% if not forloop.last %}, {% endif %}
{% endfor %}
{% endfilter %}{% endmacro %}
{% macro recursiveBlock table item sp %}
{{sp}}  {% for string in item.strings %}
{{sp}}  {% if not param.noComments %}
{{sp}}  // {{string.translation}}
{{sp}}  {% endif %}
{{sp}}  {% if string.types %}
{{sp}}  {{accessModifier}} static func {{string.key|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}({% call parametersBlock string.types %}) -> String {
    {{sp}}    return {{className}}.tr("{{table}}", "{{string.key}}", {% call argumentsBlock string.types %})
    {{sp}}  }
{{sp}}  {% else %}
{{sp}}  {{accessModifier}} static var {{string.key|swiftIdentifier:"pretty"|lowerFirstWord|escapeReservedKeywords}}: String {
	return {{className}}.tr("{{table}}", "{{string.key}}")
  }
{{sp}}  {% endif %}
{{sp}}  {% endfor %}
{{sp}}  {% for child in item.children %}
{{sp}}  {% call recursiveBlock table child sp %}
{{sp}}  {% endfor %}
{% endmacro %}

// swiftlint:disable identifier_name line_length type_body_length
{% set className %}{{param.className|default:"L10n"}}{% endset %}
{{accessModifier}} class {{className}} {
    {{accessModifier}} static let debugShowLocalizeKeys = "Show Lokalize Keys"

    {% if tables.count > 1 %}
    {% for table in tables %}
    {{accessModifier}} enum {{table.name|swiftIdentifier:"pretty"|escapeReservedKeywords}} {
        {% call recursiveBlock table.name table.levels "  " %}
    }
    {% endfor %}
    {% else %}
    {% call recursiveBlock tables.first.name tables.first.levels "" %}
    {% endif %}
}
// swiftlint:enable identifier_name line_length type_body_length

extension {{className}} {
    {{accessModifier}} static func tr(_ table: String, _ key: String, _ args: CVarArg...) -> String {
        if UserDefaults.standard.string(forKey: "debugCopyKey") == {{className}}.debugShowLocalizeKeys {
            return key
        } else {
            let localizedBundle = self.localizedBundle()
            let locale = Locale.current
            let format = NSLocalizedString(key, tableName: table, bundle: localizedBundle, comment: "")
            return String(format: format,
                          locale: locale,
                          arguments: args)
        }
    }

    private static func localizedBundle() -> Bundle {
        let bundle = Bundle(for: self)
        let bundlePath = bundle.path(forResource: Locale.current.languageCode, ofType: "lproj")
        if let localizedPath = bundlePath, let localizedBundle = Bundle(path: localizedPath) {
            return localizedBundle
        }
        if let bundlePath = bundle.path(forResource: "Base", ofType: "lproj"),
            let baseBundle = Bundle(path: bundlePath) {
                return baseBundle
        }
        fatalError("lproj files not found on project directory.")
    }
}

{% else %}
// No string found
{% endif %}
